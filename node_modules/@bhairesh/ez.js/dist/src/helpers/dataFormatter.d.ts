import { AnyObject } from "../types";
interface FormatterOptions {
    error?: boolean;
    oldData?: boolean;
}
/**
 * Data formatter - rename/customise keyname and values as you require, even nested keys and nested values can be defined.
 *
 * @param obj - data to be formatted
 * @param formatter - key:valuePath, each key value is separated by comma
 * @example "alterName:key" or "alterName:nested.key" or "nested.alterName:key" or "nested.alterName:nested.key"
 * @param options
 * @param options.error - default true, returns error content if any key or value is not found
 * @param options.oldData - default true, returns object
 * @returns return modified object along with the provided object
 *
 * @example
 * const payload = {
 *   id: "some-id",
 *   data: {
 *     theme: "dark"
 *   },
 *   portion: {
 *     id: "portion-id",
 *     data: {
 *       name: "section-wrapper"
 *     }
 *   }
 * };
 * const a = dataFormatter(payload, "pid:id,theme:data.theme,prtn.id:portion.id,prtn.name:portion.data.name,something:block", { oldData: false });
 *
 * console.log(a);
 * output:
 * {
 *   pid: 'some-id',
 *   theme: 'dark',
 *   prtn: { id: 'portion-id', name: 'section' },
 *   ERRORS: { block: 'not found' }
 * }
 */
export default function dataFormatter(obj?: AnyObject, formatter?: string, options?: FormatterOptions): AnyObject;
export {};
