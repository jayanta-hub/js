"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const getNestedValue_1 = __importDefault(require("./getNestedValue"));
const isEmpty_1 = __importDefault(require("./isEmpty"));
/**
 * Determines whether an object has a property with the specified name.
 *
 * @param {object} obj - The object to check for properties.
 * @param {string} keys - The keys to check for in the object, separated by commas.
 * @param {boolean} [returnType=false] - Determines the return type of the function. Defaults to false.
 * @returns {string|boolean} - If returnType is true, returns a boolean value indicating whether all keys were found in the object. If returnType is false, returns a string indicating whether all keys were found or which keys were not found.
 *
 * @example
 * console.log(hasOwnProperty({'a':1, 'b':2, 'c':3}, "a,d"));
 * // Output: "d not found"
 */
function hasOwnProperty(obj, keys, returnType = false) {
    if ((0, isEmpty_1.default)(obj) || (0, isEmpty_1.default)(keys))
        return returnType ? false : "false";
    const _keys = keys.split(",");
    let isFound = false;
    let error = "";
    function checkProperty(k) {
        if ((0, isEmpty_1.default)(k))
            return;
        else if (k.split(".").length > 1 && (0, getNestedValue_1.default)(obj, k))
            isFound = true;
        else if (Object.hasOwn(obj, k))
            isFound = true;
        else
            isFound = false;
        if (!isFound)
            error += `${k} `;
    }
    if (_keys.length > 1)
        for (const k of _keys)
            checkProperty(k);
    else
        checkProperty(_keys[0]);
    if (isFound)
        return returnType ? isFound : "All key(s) found";
    else
        return returnType ? isFound : `${error}not found`;
}
exports.default = hasOwnProperty;
