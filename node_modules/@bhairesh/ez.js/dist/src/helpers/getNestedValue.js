"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const hasOwnProperty_1 = __importDefault(require("./hasOwnProperty"));
const isEmpty_1 = __importDefault(require("./isEmpty"));
/**
 * Get nested value from the given object.
 *
 * @param {object} d - The object from which the nested value will be retrieved.
 * @param {string} k - The dot-separated key to access the nested value.
 * @returns {any} - The nested value from the given object. If the nested value is not found, null is returned.
 *
 * @example
 * const data = {
 *   pid: 'some-id',
 *   portions: {
 *     name: 'section'
 *   }
 * };
 * console.log(getNestedValue(data, "portions.name")); // 'section'
 */
function getNestedValue(d = {}, k = "") {
    var _a;
    if ((0, isEmpty_1.default)(d))
        return null;
    const keys = String(k).split(".");
    if (!keys.length)
        return null;
    return (_a = keys.reduce((p, c) => ((0, hasOwnProperty_1.default)(p, c, true) ? p[c] : null), d)) !== null && _a !== void 0 ? _a : null;
}
exports.default = getNestedValue;
