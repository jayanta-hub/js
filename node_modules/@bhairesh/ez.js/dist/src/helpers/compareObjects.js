"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const isObj_1 = __importDefault(require("../helpers/isObj"));
/**
 * This function compares two objects by checking if their keys and values are equal. It can handle nested objects as well.
 *
 * @param {object} obj1 - The first object to compare.
 * @param {object} obj2 - The second object to compare.
 * @returns {boolean} - Returns true if the objects have the same keys and values, false otherwise.
 *
 * @example
 * compareObject({a: 2}, {a: 2}); // true
 *
 * compareObject({a: 2}, {a: 23}); // false
 *
 * compareObject({a: {b: 2}}, {a: {b: 2}}); // true
 */
function compareObject(obj1, obj2) {
    const keys1 = Object.keys(obj1);
    const keys2 = Object.keys(obj2);
    if (keys1.length !== keys2.length)
        return false;
    for (const key of keys1) {
        const val1 = obj1[key];
        const val2 = obj2[key];
        const areObjects = (0, isObj_1.default)(val1) && (0, isObj_1.default)(val2);
        if ((areObjects && !compareObject(val1, val2)) || (!areObjects && val1 !== val2))
            return false;
    }
    return true;
}
exports.default = compareObject;
