"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const getNestedValue_1 = __importDefault(require("./getNestedValue"));
const isEmpty_1 = __importDefault(require("./isEmpty"));
/**
 * Checks the object, if any one key's value is empty it returns false.
 *
 * @param {object} data - The object to be checked for empty values.
 * @param {string[]} keys - An optional array of keys to check for empty values. Default is an empty array.
 * @returns {boolean} - Returns true if all values in the object are non-empty, otherwise returns false.
 *
 * @example
 * const payload = { id: 2, name: "John", address: { city: "bangalore" } }
 * console.log(checkObject(payload, ["iddas"]));// false
 * console.log(checkObject(payload, ["name"]));// true
 * console.log(checkObject(payload, ["address.city"]));// true
 */
function checkObject(data, keys = []) {
    if (keys.length)
        return keys.map((key) => (0, getNestedValue_1.default)(data, key)).some((v) => !(0, isEmpty_1.default)(v));
    for (const key in data)
        return !(0, isEmpty_1.default)(data[key]);
    return true;
}
exports.default = checkObject;
